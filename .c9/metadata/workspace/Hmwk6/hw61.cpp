{"filter":false,"title":"hw61.cpp","tooltip":"/Hmwk6/hw61.cpp","undoManager":{"mark":12,"position":12,"stack":[[{"start":{"row":0,"column":0},"end":{"row":220,"column":1},"action":"insert","lines":["// CSCI1300 Spring 2019","// Author: <Your name>","// Recitation: <123> â€“ <Your TA name>","// Cloud9 Workspace Editor Link: <https://ide.c9.io/ .....>","// hmwk6 ","","","#include <iostream>","#include <fstream>","#include <sstream>","#include <iomanip>","using namespace std;","","","","//////////////////////////////////////////////////////////////////////////","// other helper functions... split ","//////////////////////////////////////////////////////////////////////////","","","/* readBooks function"," * the function reads a book file from the text into book and author arrays"," *"," * @param: fileName, string, name of the book file"," * @param: titles, string array, titles of the books are stored"," * @param: authors, string array, authors of the books are stored"," * @param: numBookStored, int, the number of books currently stored in the arrays"," * @param: size, int, the size of the arrays (titles and authors)"," * @return: the number of books read into the array (number of lines in the file)"," *          or appropriate return code"," */","","//////////////////////////////////////////////////////////////////////////","// ToDo: implement readBooksfunction","// your readBooks function goes here","//////////////////////////////////////////////////////////////////////////","","","/* readRatings function"," * Read the user ratings from the file and store them"," * into users array and ratings array"," *"," * @param: fileName, string, the name of user rating file"," * @param: users, string array, the array of users"," * @param: ratings, int 2D array, the ratings of each user"," *         row i is user, and column j is a book."," *         ratings[i][j] is the user_i rated book_j"," * @param: numUsers, int, the number of users currently stored in the array"," * @param: sizeRow, int, the number of rows in the 2D array (capacity)"," * @param: sizeCol, int, the number of column in the 2D array (capacity)"," * @return: the number of users in total or appropriate return code"," */",""," //////////////////////////////////////////////////////////////////////////"," // ToDo: implement readRatings function"," // your readBooks function goes here"," //////////////////////////////////////////////////////////////////////////","","/* printBookList function (helper function)"," * print the list of books in the array"," *"," * @param: titles, string, the title of books"," * @param: authors, string, the author of books"," * @param: numBooks, int, the number of books"," * @return: void"," */","","","//////////////////////////////////////////////////////////////////////////","// ToDo: implement printAllBooks function","// your printAllBooks function goes here","//////////////////////////////////////////////////////////////////////////","","/* getRating function "," * Search for a rating given the user's name and "," * book's title and return that value"," *"," * @param: string, username "," * @param: string, title of the book "," * @param: string, array, user names"," * @param: string, array, titles"," * @param: 2D int array, list of ratings for each user"," * @param: int, number of users whose names/ratings are currently "," *         stored in the string array/2D array respectively"," * @param: int, number of books whose titles/ratings are currently "," *         stored in the string array/2D array respectively"," * @return: int, users's rating value or appropriate return code"," */","","//////////////////////////////////////////////////////////////////////////","// ToDo: implement getRating function","// your getRating function goes here","//////////////////////////////////////////////////////////////////////////","","","","","/* displayMenu:"," * displays a menu with options"," * DO NOT MODIFY THIS FUNCTION"," */","void displayMenu(){","  cout << \"Select a numerical option:\" << endl;","  cout << \"======Main Menu=====\" << endl;","  cout << \"1. Read book file\" << endl;","  cout << \"2. Read user file\" << endl;","  cout << \"3. Print book list\" << endl;","  cout << \"4. Get rating\" << endl;","  cout << \"5. Quit\" << endl;","}","","","int main(int argc, char const *argv[]) {","","    // taking menu choice ","    string choice;","","    // number of books and users stored in the arrays","    int numBooks = 0;","    int numUsers = 0;","","    // Use the these values to declare your","    // titles, authors, users and ratings arrays","    const static int  userArrSize = 100;","    const static int  bookArrSize = 50;","","","    // variables to store user inputs ","    string bookFileName;","    string userFileName;","    string userName, bookTitle;    ","","    while (choice != \"5\") {","        displayMenu();","","        // take an opton (1, 2, 3, or 4)","        getline(cin, choice);","","        // convert the `choice` to an integer ","        int menuChoice = stoi(choice); ","        switch (menuChoice) {","            case 1:","                // read book file","                cout << \"Enter a book file name:\" << endl;","                getline(cin, bookFileName);","","                //////////////////////////////////////////////////////////////////////////","                // Your code here. Call the appropriate function(s).","                //////////////////////////////////////////////////////////////////////////","","                // Use the below messages and match them to the return code. Update variables as needed.","                // cout << \"No books saved to the database.\" << endl;","                // cout << \"Database is already full. No books were added.\" << endl;     ","                // cout << \"Database is full. Some books may have not been added.\" << endl;     ","                // cout << \"Total books in the database: \" << numBooks << endl;","                ","                cout << endl;","                break;","","            case 2:","                // read ratings file","                cout << \"Enter a user file name:\" << endl;","                getline(cin, userFileName);","","                //////////////////////////////////////////////////////////////////////////","                // Your code here. Call the appropriate function(s).","                //////////////////////////////////////////////////////////////////////////","","                // Use the below messages and match them to the return code. Update variables as needed.","                // cout << \"No users saved to the database.\" << endl;","                // cout << \"Database is already full. No users were added.\" << endl; ","                // cout << \"Database is full. Some users may have not been added.\" << endl; ","                // cout << \"Total users in the database: \" << numUsers << endl;","","                cout << endl;","                break;","","            case 3:","                // print the list of the books","                ","                //////////////////////////////////////////////////////////////////////////","                // Your code here. Call the appropriate function(s).","                //////////////////////////////////////////////////////////////////////////","","                cout << endl;","                break;","","            case 4:","                // get user's rating ","                // take user name","                cout << \"Enter username:\" << endl;","                getline(cin, userName);","","                // take book title ","                cout << \"Enter book title:\" << endl;","                getline(cin, bookTitle);","","                //////////////////////////////////////////////////////////////////////////","                // Your code here. Call the appropriate function(s).","                //////////////////////////////////////////////////////////////////////////","","                // Use the below messages and match them to the return code. Update variables as needed.","                // cout << userName << \" has not rated \" << bookTitle << endl; ","                // cout << userName << \" or \" << bookTitle << \" does not exist\" << endl; ","                // cout << userName << \" rated \" << bookTitle << \" with \" << rate << endl; ","","","                cout << endl;","                break;","            case 5:","                // quit","                cout << \"good bye!\" << endl;","                break;","","            default:","                cout << \"invalid input\" << endl;","        }","    }","","    return 0;","}"],"id":211}],[{"start":{"row":7,"column":0},"end":{"row":11,"column":20},"action":"remove","lines":["#include <iostream>","#include <fstream>","#include <sstream>","#include <iomanip>","using namespace std;"],"id":212},{"start":{"row":7,"column":0},"end":{"row":18,"column":20},"action":"insert","lines":["#include <iostream>","#include <cmath>","#include <cstdlib>","#include <unistd.h>","#include <stdio.h>","#include <cctype>","#include <string>","#include <fstream>","#include <locale>","#include <sstream>","#include <iomanip>","using namespace std;"]}],[{"start":{"row":24,"column":74},"end":{"row":25,"column":0},"action":"insert","lines":["",""],"id":213}],[{"start":{"row":25,"column":0},"end":{"row":48,"column":1},"action":"insert","lines":["int split (string str, char c, string words[], int length)","{","    if (str.length() == 0) {","        return 0;","    }","    string word = \"\";","    int j = 0;","    int k = 0;","    str = str + c;","    for (int i = 0; i < str.length(); i++)","    {","        if (str[i] == c) ","        {","        \tif (word.length() == 0) continue;","            words[k] = word;","            k++;","            j++;","            word = \"\";","        } else {","            word = word + str[i];","        }","    }","    return j;","}"],"id":214}],[{"start":{"row":51,"column":0},"end":{"row":66,"column":74},"action":"remove","lines":["/* readBooks function"," * the function reads a book file from the text into book and author arrays"," *"," * @param: fileName, string, name of the book file"," * @param: titles, string array, titles of the books are stored"," * @param: authors, string array, authors of the books are stored"," * @param: numBookStored, int, the number of books currently stored in the arrays"," * @param: size, int, the size of the arrays (titles and authors)"," * @return: the number of books read into the array (number of lines in the file)"," *          or appropriate return code"," */","","//////////////////////////////////////////////////////////////////////////","// ToDo: implement readBooksfunction","// your readBooks function goes here","//////////////////////////////////////////////////////////////////////////"],"id":215},{"start":{"row":51,"column":0},"end":{"row":77,"column":1},"action":"insert","lines":["int readBooks(string filename, string titles[], string authors[], int numBooksStored, int size){","    if (numBooksStored == size){","        return -2;","    }","    ifstream file;","    file.open(filename);","    if(file.is_open()){","        string line = \"\";","        string linearr[2];","        int i = numBooksStored;","        while(getline(file,line)){","            if(line.length() == 0) continue;","            split(line, ',' , linearr, 2);","            if (i == size ){","                break;","            }","            authors[i] = linearr[0];","            titles[i] = linearr[1];","            i++;","        }","        return i;","    }","    else{","        return -1;","    }","    file.close();","}"]}],[{"start":{"row":80,"column":0},"end":{"row":98,"column":75},"action":"remove","lines":["/* readRatings function"," * Read the user ratings from the file and store them"," * into users array and ratings array"," *"," * @param: fileName, string, the name of user rating file"," * @param: users, string array, the array of users"," * @param: ratings, int 2D array, the ratings of each user"," *         row i is user, and column j is a book."," *         ratings[i][j] is the user_i rated book_j"," * @param: numUsers, int, the number of users currently stored in the array"," * @param: sizeRow, int, the number of rows in the 2D array (capacity)"," * @param: sizeCol, int, the number of column in the 2D array (capacity)"," * @return: the number of users in total or appropriate return code"," */",""," //////////////////////////////////////////////////////////////////////////"," // ToDo: implement readRatings function"," // your readBooks function goes here"," //////////////////////////////////////////////////////////////////////////"],"id":216},{"start":{"row":80,"column":0},"end":{"row":114,"column":1},"action":"insert","lines":["int readRatings(string filename, string users[], int ratings[][50], int numUsers, int maxRows, int maxColumns){","    if(numUsers == maxRows){","        return -2;","    }","    ifstream file;","    file.open(filename);","    if(file.is_open()){","        int row = numUsers;","        string line = \"\";","        string linearr[maxColumns + 1];","        while(getline(file,line)){","            if(line.length() == 0) continue;","            split(line, ',', linearr, maxColumns + 1);","            if(maxRows == row){","                break;","            }","            users[row] = linearr[0];","            int irating = 0;","            for(int col = 1; col <= 50; col++){","                if(linearr[col] != \"\"){","                    string rate = linearr[col];","                    ratings[row][irating] = stoi(rate);","                    irating++;","                }","            }","            row++;","        }","        file.close();","        return row;","    }","    else{","        return -1;","    }","    ","}"]}],[{"start":{"row":116,"column":0},"end":{"row":129,"column":74},"action":"remove","lines":["/* printBookList function (helper function)"," * print the list of books in the array"," *"," * @param: titles, string, the title of books"," * @param: authors, string, the author of books"," * @param: numBooks, int, the number of books"," * @return: void"," */","","","//////////////////////////////////////////////////////////////////////////","// ToDo: implement printAllBooks function","// your printAllBooks function goes here","//////////////////////////////////////////////////////////////////////////"],"id":217},{"start":{"row":116,"column":0},"end":{"row":128,"column":1},"action":"insert","lines":["void printAllBooks(string titles[], string authors[], int num){","    if(num <= 0){","        cout<< \"No books are stored\" << endl;","    }","    int i = 0;","    if (num > 0){","        cout << \"Here is a list of books\" << endl;","    }","    while(i < num){","        cout << titles[i] << \" by \" << authors[i] << endl;","        i++;","    }","}"]}],[{"start":{"row":130,"column":0},"end":{"row":149,"column":74},"action":"remove","lines":["/* getRating function "," * Search for a rating given the user's name and "," * book's title and return that value"," *"," * @param: string, username "," * @param: string, title of the book "," * @param: string, array, user names"," * @param: string, array, titles"," * @param: 2D int array, list of ratings for each user"," * @param: int, number of users whose names/ratings are currently "," *         stored in the string array/2D array respectively"," * @param: int, number of books whose titles/ratings are currently "," *         stored in the string array/2D array respectively"," * @return: int, users's rating value or appropriate return code"," */","","//////////////////////////////////////////////////////////////////////////","// ToDo: implement getRating function","// your getRating function goes here","//////////////////////////////////////////////////////////////////////////"],"id":218},{"start":{"row":130,"column":0},"end":{"row":172,"column":1},"action":"insert","lines":["int getRating(string username, string title, string users[], string titles[], int ratings[][50], int usersnum, int books){","    bool userflag = false;","    bool titleflag = false;","    int titleindex = 0;","    int userindex = 0;","    string lowerusername = \"\";","    string lowertitle = \"\";","    for(int i = 0; i < username.length(); i++){","        lowerusername += tolower(username[i]);","    }","    for(int i = 0; i < title.length(); i++){","        lowertitle += tolower(title[i]);","    }","    for(int i = 0; i < usersnum; i++){ //array of usernames","        string usernew = \"\";","        string word = users[i];","        for(int i = 0; i < word.length(); i++){","            usernew += tolower(word[i]);","        }","        if (usernew == lowerusername){","            userflag = true;","            userindex = i;","        }","    }","    for (int j = 0; j < books; j++){","        string titlenew = \"\";","        string word = titles[j];","        for(int i = 0; i < word.length(); i++){","            titlenew += tolower(word[i]);","        } ","        if (titlenew == lowertitle){","            titleflag = true;","            titleindex = j;","        }","    }","    if (userflag == true && titleflag == true){","        cout << \"yes\" << endl; ","        return ratings[userindex][titleindex];","    }","    else if(userflag == false || titleflag == false){","        return -3;","    }","}"]}],[{"start":{"row":194,"column":4},"end":{"row":204,"column":39},"action":"remove","lines":["// taking menu choice ","    string choice;","","    // number of books and users stored in the arrays","    int numBooks = 0;","    int numUsers = 0;","","    // Use the these values to declare your","    // titles, authors, users and ratings arrays","    const static int  userArrSize = 100;","    const static int  bookArrSize = 50;"],"id":219},{"start":{"row":194,"column":4},"end":{"row":215,"column":19},"action":"insert","lines":["// taking menu choice ","    string choice;","","    // number of books and users stored in the arrays","    int numBooks = 0;","    int numUsers = 0;","","    // Use the these values to declare your","    // titles, authors, users and ratings arrays","    const static int  userArrSize = 100;","    const static int  bookArrSize = 50;","    ","    int maxRows = 100;","    int maxColumns = 50;","    ","    string titles[50];","    string authors[50];","    string users[100];","    int ratings[100][50];","    int numofBooks = 0;","    int numofUsers = 0;","    int rating = 0;"]}],[{"start":{"row":237,"column":16},"end":{"row":239,"column":90},"action":"remove","lines":["//////////////////////////////////////////////////////////////////////////","                // Your code here. Call the appropriate function(s).","                //////////////////////////////////////////////////////////////////////////"],"id":220},{"start":{"row":237,"column":16},"end":{"row":250,"column":17},"action":"insert","lines":["numofBooks = readBooks(bookFileName, titles, authors, numBooks, bookArrSize);","                if (numofBooks == -1){","                    cout << \"No books saved to the database.\" << endl;","                }","                else if(numofBooks == -2){","                    cout << \"Database is already full. No books were added.\" << endl; ","                }","                ","                else if(numofBooks == bookArrSize){","                    cout << \"Database is full. Some books may have not been added.\" << endl;","                }","                else{","                    cout << \"Total books in the database: \" << numofBooks << endl;","                }"]}],[{"start":{"row":266,"column":16},"end":{"row":268,"column":90},"action":"remove","lines":["//////////////////////////////////////////////////////////////////////////","                // Your code here. Call the appropriate function(s).","                //////////////////////////////////////////////////////////////////////////"],"id":221},{"start":{"row":266,"column":16},"end":{"row":279,"column":17},"action":"insert","lines":["numofUsers = readRatings(userFileName, users, ratings, numUsers, maxRows, maxColumns);","                ","                if(numofUsers == -1){","                    cout << \"No users saved to the database.\" << endl;","                }","                else if(numofUsers == -2){","                    cout << \"Database is already full. No users were added.\" << endl; ","                }","                else if(numofUsers == maxRows){","                    cout << \"Database is full. Some users may have not been added.\" << endl; ","                }","                else{","                    cout << \"Total users in the database: \" << numofUsers << endl;","                }"]}],[{"start":{"row":293,"column":15},"end":{"row":295,"column":90},"action":"remove","lines":[" //////////////////////////////////////////////////////////////////////////","                // Your code here. Call the appropriate function(s).","                //////////////////////////////////////////////////////////////////////////"],"id":222},{"start":{"row":293,"column":15},"end":{"row":293,"column":57},"action":"insert","lines":[" printAllBooks(titles, authors, numBooks);"]}],[{"start":{"row":308,"column":16},"end":{"row":310,"column":90},"action":"remove","lines":["//////////////////////////////////////////////////////////////////////////","                // Your code here. Call the appropriate function(s).","                //////////////////////////////////////////////////////////////////////////"],"id":223},{"start":{"row":308,"column":16},"end":{"row":318,"column":17},"action":"insert","lines":["rating = getRating(userName, bookTitle, users, titles, ratings, numUsers, numBooks);","                ","                if (rating == 0){","                    cout << userName << \" has not rated \" << bookTitle << endl;","                }","                else if(rating == -3){","                    cout << userName << \" or \" << bookTitle << \" does not exist\" << endl;","                }","                else{","                    cout << userName << \" rated \" << bookTitle << \" with \" << rating << endl;","                }"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":339,"column":1},"end":{"row":339,"column":1},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1551692936965,"hash":"8c5dc049a878f69e63ac7b7b1c186d708ce17eab"}