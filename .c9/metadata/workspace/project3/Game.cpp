{"changed":true,"filter":false,"title":"Game.cpp","tooltip":"/project3/Game.cpp","value":"#include \"Game.h\"\n#include \"Tile.cpp\"\n#include \"Hero.cpp\"\n#include \"City.cpp\"\n#include \"Warrior.cpp\"\n#include <iostream>\n#include <cmath>\n#include <cstdlib>\n#include <unistd.h>\n#include <stdio.h>\n#include <cctype>\n#include <string>\n#include <fstream>\n#include <string>\nusing namespace std;\n\nint split (string str, char c, string words[], int length)\n{\n    if (str.length() == 0) {\n        return 0;\n    }\n    string word = \"\";\n    int j = 0;\n    int k = 0;\n    str = str + c;\n    for (int i = 0; i < str.length(); i++)\n    {\n        if (str[i] == c) \n        {\n        \tif (word.length() == 0) continue;\n            words[k] = word;\n            k++;\n            j++;\n            word = \"\";\n        } else {\n            word = word + str[i];\n        }\n    }\n    return j ;\n}\n\n\nGame::Game(){\n    turns = 0;\n    gameover = false;\n}\n\n\n//load map text file into 2d array of tile objects\nvoid Game::readmap(string filename){\n    ifstream file;\n    file.open(filename);\n    if(file.is_open()){\n        string line = \"\";\n        int row = 0;\n        string letter;\n        //Map m1();\n        string linearr[16]; \n        while(getline(file,line)){ //loop through eachn line\n            if(line.length() == 0) continue; //skip if line is empty\n            split(line, ',' , linearr, 16);\n            for(int i = 0; i < 16; i++){\n                letter = linearr[i];\n                map[row][i] =  Tile(letter); \n            }\n            row++;\n        }\n    }\n    else{\n        cout << \"Error\";\n    }\n}\n\nvoid Game::readwarrior(string filename){\n    ifstream file;\n    file.open(filename);\n    if(file.is_open()){\n        string line = \"\";\n        int row = 0;\n        bool isfree = false;\n        bool hasship = false;\n        bool dragonglass = false;\n        string linearr[7];\n        while(getline(file,line)){ //loop through eachn line\n            if(line.length() == 0) continue; //skip if line is empty\n            split(line, ',' , linearr, 7);\n            if(linearr[4] == \"no\"){\n                isfree = false;\n            }\n            else if(linearr[4] == \"yes\"){\n                isfree = true;\n            }\n            if(linearr[5] == \"no\"){\n                hasship = false;\n            }\n            else if(linearr[5] == \"yes\"){\n                hasship = true;\n            }\n            if(linearr[6] == \"no \"){\n                dragonglass = false;\n            }\n            else if(linearr[6] == \"yes \"){\n                dragonglass = true;\n            }\n            warriors1.push_back(Warrior(linearr[0], stoi(linearr[1]), stoi(linearr[2]), stoi(linearr[3]), isfree, hasship, dragonglass));\n        }\n        \n    }\n    else{\n        cout << \"Error\";\n    }\n}\n\n\n//read hero text file into vector of hero objects\nvoid Game::readhero(string filename){\n    ifstream file;\n    file.open(filename);\n    if(file.is_open()){\n        string line = \"\";\n        string linearr[11];\n        bool hasship = false;\n        while(getline(file,line)){//loop through eachn line\n            vector<Warrior> warriorsstart;\n            if(line.length() == 0) continue; //skip if line is empty\n            split(line, ',' , linearr, 11);\n            for(int i = 4; i < 8; i++){\n                if(linearr[i] != \"NULL\"){\n                    for(int j = 0; j < 14; j++){\n                        if(warriors1[j].getname() == linearr[i]){\n                            warriorsstart.push_back(warriors1[j]);\n                        }\n                    }\n                }\n            }\n            if (linearr[10] == \"no \"){\n                hasship = false;\n            }\n            else if(linearr[10] == \"yes \"){\n                hasship = true;\n            }\n            heroes.push_back(Hero(linearr[0], stoi(linearr[1]), stoi(linearr[2]), stoi(linearr[3]), warriorsstart, stoi(linearr[8]), stoi(linearr[9]), hasship));\n        }\n    }\n    else{\n        cout << \"Error\";\n    }\n}\n\n//read text file of cities into array of cities\nvoid Game::readcity(string filename){\n    ifstream file;\n    file.open(filename);\n    if(file.is_open()){\n        string line = \"\";\n        int row = 0;\n        string letter;\n        string linearr[5]; \n        while(getline(file,line)){ //loop through eachn line\n            if(line.length() == 0) continue; //skip if line is empty\n            split(line, ',' , linearr, 5);\n            cities.push_back(City(linearr[0], linearr[1], stoi(linearr[2]), stoi(linearr[3]), stoi(linearr[4])));\n        }\n    }\n    else{\n        cout << \"Error\";\n    }\n}\n\n\n//prompt user to choose a character or create their own\nvoid Game::intro(){\n    cout << \"Welcome to the G A M E of T H R O N E S!\" << endl;\n    string name = \"\";\n    cout << \"State your name, Your Grace:\" << endl;\n    cin >> name;\n    string answer = \"\";\n    cout << \"Would you like to choose a hero \" << name << \", Your Grace?(Y/N):\";\n    cin >> answer;\n    if(answer == \"Y\" || answer == \"y\"){\n        cout<< \"Please choose from the following heroes(Answer with #):\" << endl;\n        int num = 0;\n        cout<< \"\\t1. Cersei Lannister\\n\\t2. Stannis Baratheon\\n\\t3. Jon Snow\\n\\t4. Sansa Stark\\n\\t5. Euron Greyjoy\\n\\t6. Daenerys Targaryen\" << endl;\n        cin >> num;\n        vector<Warrior> userwarriors;\n        for(int i = 0; i < heroes[num - 1].getvectorsize(); i++){\n            userwarriors.push_back(heroes[num - 1].getwarrior(i));\n        }\n        //Hero user(heroes[num - 1].getname(), heroes[num - 1].getmoney(), heroes[num - 1].getinfluence(), heroes[num - 1].getarmysize(), userwarriors, heroes[num - 1].getrow(), heroes[num - 1].getcol(), heroes[num - 1].getship());\n        user.setname(heroes[num - 1].getname());\n        user.setmoney(heroes[num - 1].getmoney());\n        user.setinfluence(heroes[num - 1].getinfluence());\n        user.setarmysize(heroes[num - 1].getarmysize());\n        user.fillvector(userwarriors);\n        user.setrow(heroes[num - 1].getrow());\n        user.setcol(heroes[num - 1].getcol());\n        user.setship(heroes[num - 1].getship());\n        for(int i = 0; i < user.getvectorsize(); i++){\n            if(user.getwarrior(i).getship() == true){\n                user.setship(true);\n            }\n        }\n        \n        \n        if(map[user.getrow()][user.getcol()].isCity() == true){\n            for(int j = 0; j < cities.size(); j++){\n                if(map[user.getrow()][user.getcol()].getLetter() == cities[j].getletter()){\n                    user.addpoints(cities[j].getpoints());\n                }\n            }\n        }\n        else if((map[user.getrow()][user.getcol()].isWater()) == true){\n            user.addpoints(1);\n        }\n        else if((map[user.getrow()][user.getcol()].isLand()) == true){\n            user.addpoints(2);\n        }\n        \n    }\n    else if(answer == \"N\" || answer == \"n\"){\n        cout << \"Your Grace \" << name << \", you have chosen to go on this journey alone.\\nPlease provide starting values for your adventure.\" <<endl;\n        int money = 0;\n        int influence = 0;\n        int armysize = 0;\n        int row = 0;\n        int col = 0;\n        bool ship = false;\n        cout << \"Please choose a value for money(0-10000):\" << endl;\n        cin >> money;\n        cout << \"Please choose a value for influence(0-10000):\" << endl;\n        cin >> influence;\n        cout << \"Please choose a value for army size(0-10000):\" << endl;\n        cin >> armysize;\n        cout << \"Please choose a row value(0-24):\" << endl;\n        cin >> row;\n        cout << \"Please choose a column value(0-15):\" << endl;\n        cin >> col;\n        if(map[row][col].getLetter() == \"w\"){\n            ship = true;\n        }\n        vector<Warrior> warriorsempty;\n        //Hero user(name, money, influence, armysize, warriorsempty, row, col, ship);\n        user.setname(name);\n        user.setmoney(money);\n        user.setinfluence(influence);\n        user.setarmysize(armysize);\n        user.setrow(row);\n        user.setcol(col);\n        if(map[user.getrow()][user.getcol()].getLetter() == \"w\"){\n            user.setship(true);\n        }\n        if(map[user.getrow()][user.getcol()].isCity() == true){\n            for(int j = 0; j < cities.size(); j++){\n                if(map[user.getrow()][user.getcol()].getLetter() == cities[j].getletter()){\n                    user.addpoints(cities[j].getpoints());\n                }\n            }\n        }\n        else if((map[user.getrow()][user.getcol()].isWater()) == true){\n            user.addpoints(1);\n        }\n        else if((map[user.getrow()][user.getcol()].isLand()) == true){\n            user.addpoints(2);\n        }\n    }\n}\n\n//prints 7x7 mini map based on where the player is located currently\nvoid Game::printminimap(){\n    bool flag = false;\n    int minirow = 0;\n    int minicol = 0;\n    int row = user.getrow();\n    int col = user.getcol();\n    int startrow = row - 3; //13\n    int startcol = col - 3; //4\n    for(int i = startrow; i < startrow + 7; i++){\n        minicol = 0;\n        for(int j = startcol; j < startcol + 7; j++){\n            flag = false;\n            if((i < 0 || i > 24) || (j < 0 || j > 15)){\n                minimap[minirow][minicol] = '#';\n                flag = true;\n            }\n            else if(map[i][j].getLetter() == \"w\"){\n                minimap[minirow][minicol] = '~';\n                flag = true;\n            }\n            else if(map[i][j].getLetter() == \"p\"){\n                minimap[minirow][minicol] = '*';\n                flag = true;\n            }\n            else if((i >= 0 && i <= 24) && (j >= 0 && j <= 15)){\n                char letter[1] = {};\n                string str = map[i][j].getLetter();\n                letter[0] = str[0];\n                if((int(letter[0]) > 64 || int(letter[0]) < 91) && flag == false){\n                    minimap[minirow][minicol] = letter[0];\n                }\n            }\n            minicol++;\n        }\n        minirow++;\n    }\n    \n    for(int a = 0; a < 7; a++){\n        for(int b = 0; b < 7; b++){\n            cout << minimap[a][b];\n            cout << \" \";\n        }\n        cout << endl;\n    }\n    \n}\n\n//ask user what they want to do for their turn\nvoid Game::promptturn(){\n    cout << \"What would you like to do for your turn?(Answer with #):\" << endl;\n    int answer = 0;\n    cout << \"\\t1. Travel\\n\\t2. Rest\\n\\t3. Contsult with the gods\" << endl;\n    cin >> answer;\n    if(answer == 1){\n        travel();\n    }\n    else if(answer == 2){\n        rest();\n    }\n    else if(answer == 3){\n        consult();\n    }\n}\n\n//ask user how they want tp handle an encouter between themselves and another hero\nvoid Game::userencounter(){\n    //run intructions for an encounter\n    //\n    //based on what type of encounter and what the user wants\n    //to do, different code will be executed.\n    bool flag = false;\n    int idx = 0;\n    for(int i = 0; i < heroes.size(); i++){\n        if(user.getname() == heroes[i].getname()){\n            continue;\n        }\n        else if(abs(user.getcol() - heroes[i].getcol()) < 3 && abs(user.getrow() - heroes[i].getrow()) < 3){\n            flag = true;\n            idx = i;\n        }\n    }\n    if(flag == true){\n        cout << \"You are about to have an encounter\" << endl;\n        cout << \"How would you like to deal with this encounter?(Answer with #):\" << endl;\n        cout << \"\\t1. Give a speech\\n\\t2. Buy them outright\\n\\t3. Battle\" << endl;\n        int answer;\n        cin >> answer;\n        if(answer == 1){\n            givespeech(idx);\n        }\n        else if(answer == 2){\n            buyout(idx);\n        }\n        else if(answer == 3){\n            battle(idx);\n        }\n    }\n}\n\n\n//run similar code for encounter in the background to heros that arent he user\nvoid Game::otherecnounter(){\n    int idx = 0;\n    bool flag = false;\n    for(int i = 0; i < heroes.size(); i++){\n        for(int j = 0; j < heroes.size(); j++){\n            if(heroes[i].getname() != heroes[j].getname()){\n            if(abs(heroes[i].getcol() - heroes[j].getcol()) < 3 && abs(heroes[i].getrow() - heroes[j].getrow()) < 3){\n                \n                if(heroes[i].gethasbattled() == false && heroes[j].gethasbattled() == false){\n                    if(heroes[i].getvectorsize() == 0 && heroes[j].getvectorsize() == 0){\n                        if(heroes[i].getarmysize() > heroes[j].getarmysize()){\n                            cout << heroes[j].getname() << \" has retired.\" << endl;\n                            for(int k = 0; k < heroes[j].getvectorsize(); k++){\n                                if(heroes[i].getvectorsize() < 4){\n                                    heroes[i].addwarrior(heroes[j].getwarrior(k));\n                                }\n                            }\n                            heroes[i].addmoney(heroes[j].getmoney());\n                            heroes[i].addinfluence(heroes[j].getinfluence());\n                            heroes[i].addmoney(heroes[j].getmoney());\n                            heroes[i].sethasbattled(true);\n                            heroes[j].sethasbattled(true);\n                        }\n                        else if(heroes[i].getarmysize() < heroes[j].getarmysize()){\n                            cout << heroes[i].getname() << \" has retired.\" << endl;\n                            for(int x = 0; x < heroes[i].getvectorsize(); x++){\n                                if(heroes[j].getvectorsize() < 4){\n                                    heroes[j].addwarrior(heroes[i].getwarrior(x));\n                                }\n                            }\n                            heroes[j].addmoney(heroes[i].getmoney());\n                            heroes[j].addinfluence(heroes[i].getinfluence());\n                            heroes[j].addmoney(heroes[i].getmoney());\n                            heroes[i].sethasbattled(true);\n                            heroes[j].sethasbattled(true);\n                        }\n                        else if(heroes[i].getarmysize() == heroes[j].getarmysize()){\n                            heroes[i].setarmysize(heroes[i].getarmysize() / 2);\n                            heroes[j].setarmysize(heroes[j].getarmysize() / 2);\n                            heroes[i].sethasbattled(true);\n                            heroes[j].sethasbattled(true);\n                        }\n                        else if((heroes[i].getvectorsize() == 0 && heroes[i].getarmysize() == 0) &&  (heroes[j].getvectorsize() == 0 && heroes[j].getarmysize() == 0)){\n                            cout << heroes[i].getname() << \" has retired.\" << endl;\n                            cout << heroes[j].getname() << \" has retired.\" << endl;\n                            heroes[i].sethasbattled(true);\n                            heroes[j].sethasbattled(true);\n                        }\n                    }\n                    else if((heroes[i].getvectorsize() == 0 && heroes[j].getvectorsize() > 0) || (heroes[i].getvectorsize() > 0 && heroes[j].getvectorsize() == 0)){\n                        if(heroes[i].getvectorsize() == 0){\n                            cout << heroes[i].getname() << \" has retired.\" << endl;\n                            for(int a = 0; a < heroes[i].getvectorsize(); a++){\n                                if(heroes[j].getvectorsize() < 4){\n                                    heroes[j].addwarrior(heroes[i].getwarrior(a));\n                                }\n                            }\n                            heroes[j].addmoney(heroes[i].getmoney());\n                            heroes[j].addinfluence(heroes[i].getinfluence());\n                            heroes[j].addmoney(heroes[i].getmoney());\n                            heroes[i].sethasbattled(true);\n                            heroes[j].sethasbattled(true);\n                        }\n                        else if(heroes[j].getvectorsize() == 0){\n                            cout << heroes[j].getname() << \" has retired.\" << endl;\n                            for(int b = 0; b < heroes[j].getvectorsize();b++){\n                                if(heroes[i].getvectorsize() < 4){\n                                    heroes[i].addwarrior(heroes[j].getwarrior(b));\n                                }\n                            }\n                            heroes[i].addmoney(heroes[j].getmoney());\n                            heroes[i].addinfluence(heroes[j].getinfluence());\n                            heroes[i].addmoney(heroes[j].getmoney());\n                            heroes[i].sethasbattled(true);\n                            heroes[j].sethasbattled(true);\n                        }\n                    }\n                    else if(heroes[i].getvectorsize() > 0 && heroes[j].getvectorsize() > 0){\n                        int hero1 = heroes[i].getvectorsize();\n                        int hero2 = heroes[j].getvectorsize();\n                        int hero1idx = 4;\n                        int hero2idx = 4;\n                        int hero1battle = 0;\n                        int hero2battle = 0;\n                        while(hero1idx >= hero1){\n                            hero1idx = rand() % 4;\n                        }\n                        while(hero2idx >= hero2){\n                            hero2idx = rand() % 4;\n                        }\n                        hero1battle = (heroes[i].getarmysize() * heroes[i].getwarrior(hero1idx).getstrength());\n                        hero2battle = (heroes[j].getarmysize() * heroes[j].getwarrior(hero2idx).getstrength());\n                        if(hero1battle > hero2battle){ // user wins\n                            cout << heroes[j].getname() << \" has retired.\" << endl;\n                            for(int c = 0; c < heroes[j].getvectorsize(); c++){\n                                if(user.getvectorsize() < 4){\n                                    heroes[i].addwarrior(heroes[j].getwarrior(c));\n                                }\n                            }\n                            heroes[i].addmoney(heroes[j].getmoney());\n                            heroes[i].addinfluence(heroes[j].getinfluence());\n                            heroes[i].addarmysize(heroes[j].getarmysize());\n                            heroes[i].sethasbattled(true);\n                            heroes[j].sethasbattled(true);\n                        }\n                        else if(hero1battle < hero2battle){ // user loses\n                            cout << heroes[i].getname() << \" has retired.\" << endl;\n                            for(int d = 0; d < heroes[j].getvectorsize(); d++){\n                                if(heroes[i].getvectorsize() < 4){\n                                    heroes[i].addwarrior(heroes[j].getwarrior(d));\n                                }\n                            }\n                            heroes[j].addmoney(heroes[i].getmoney());\n                            heroes[j].addinfluence(heroes[i].getinfluence());\n                            heroes[j].addarmysize(heroes[i].getarmysize());\n                            heroes[i].sethasbattled(true);\n                            heroes[j].sethasbattled(true);\n                        }\n                    }\n                }   \n            }    \n            }\n        }\n    }\n}\n\n\n//sets new row or column value based on what direction the user chpse to go when traveling\nbool Game::travel(){\n    //run code for if user deciedes to travel for their turn\n    //\n    //decide which directiont the user will travel\n    string answer = \"\";\n    cout << \"Which direction would you like to travel: North, South, East, or West?\" << endl;\n    cin >> answer;\n    if(answer == \"North\" || answer == \"north\"){\n        int rowup = user.getrow() - 1;\n        if(isoutofbounds(rowup, user.getcol()) == false){\n            if(map[rowup][user.getcol()].isWater() == true && user.getship() == true){\n                user.setrow(rowup);\n                user.addpoints(1);\n                user.addmoney(10);\n            }\n            else if(map[rowup][user.getcol()].isWater() == true && user.getship() == false){\n                cout << \"Cant travel to water without ship.\" << endl;\n            }\n            if(map[rowup][user.getcol()].isCity() == true){\n                user.setrow(rowup);\n                for(int j = 0; j < cities.size(); j++){\n                    if(map[user.getrow()][user.getcol()].getLetter() == cities[j].getletter()){\n                        user.addpoints(cities[j].getpoints());\n                        user.addmoney(cities[j].getmoney());\n                        user.addarmysize(cities[j].getarmysize());\n                    }\n                }\n            }\n            else if(map[rowup][user.getcol()].isLand() == true){\n                user.setrow(rowup);\n                user.addpoints(2);\n                user.addmoney(20);\n                user.addarmysize(10);\n            }\n        }\n        else if(isoutofbounds(rowup, user.getcol()) == true){\n            cout << \"You fell off the side of the map\" << endl;\n        }\n    }\n    else if(answer == \"South\" || answer == \"south\"){\n        int rowdown = user.getrow() + 1;\n        if(isoutofbounds(rowdown, user.getcol()) == false){\n            if(map[rowdown][user.getcol()].isWater() == true && user.getship() == true){\n                user.setrow(rowdown);\n                user.addpoints(1);\n                user.addmoney(10);\n            }\n            else if(map[rowdown][user.getcol()].isWater() == true && user.getship() == false){\n                cout << \"Cant travel to water without ship.\" << endl;\n            }\n            if(map[rowdown][user.getcol()].isCity() == true){\n                user.setrow(rowdown);\n                for(int j = 0; j < cities.size(); j++){\n                    if(map[user.getrow()][user.getcol()].getLetter() == cities[j].getletter()){\n                        user.addpoints(cities[j].getpoints());\n                        user.addmoney(cities[j].getmoney());\n                        user.addarmysize(cities[j].getarmysize());\n                    }\n                }\n            }\n            else if(map[rowdown][user.getcol()].isLand() == true){\n                user.setrow(rowdown);\n                user.addpoints(2);\n                user.addmoney(20);\n                user.addarmysize(10);\n            }\n        }\n        else if(isoutofbounds(rowdown, user.getcol()) == true){\n            cout << \"You fell off the side of the map\" << endl;\n        }\n    }\n    else if(answer == \"East\" || answer == \"east\"){\n        int colright = user.getcol() + 1;\n        if(isoutofbounds(user.getrow(), colright) == false){\n            if(map[user.getrow()][colright].isWater() == true && user.getship() == true){\n                user.setcol(colright);\n                user.addpoints(1);\n                user.addmoney(10);\n            }\n            else if(map[user.getrow()][colright].isWater() == true && user.getship() == false){\n                cout << \"Cant travel to water without ship.\" << endl;\n            }\n            if(map[user.getrow()][colright].isCity() == true){\n                user.setcol(colright);\n                for(int j = 0; j < cities.size(); j++){\n                    if(map[user.getrow()][user.getcol()].getLetter() == cities[j].getletter()){\n                        user.addpoints(cities[j].getpoints());\n                        user.addmoney(cities[j].getmoney());\n                        user.addarmysize(cities[j].getarmysize());\n                    }\n                }\n            }\n            else if(map[user.getrow()][colright].isLand() == true){\n                user.setcol(colright);\n                user.addpoints(2);\n                user.addmoney(20);\n                user.addarmysize(10);\n            }\n        }\n        else if(isoutofbounds(user.getrow(), colright) == true){\n            cout << \"You fell off the side of the map\" << endl;\n        }\n    }\n    else if(answer == \"West\" || answer == \"west\"){\n        int colleft = user.getcol() - 1;\n        if(isoutofbounds(user.getrow(), colleft) == false){\n            if(map[user.getrow()][colleft].isWater() == true && user.getship() == true){\n                user.setcol(colleft);\n                user.addpoints(1);\n                user.addmoney(10);\n            }\n            else if(map[user.getrow()][colleft].isWater() == true && user.getship() == false){\n                cout << \"Cant travel to water without ship.\" << endl;\n            }\n            if(map[user.getrow()][colleft].isCity() == true){\n                user.setcol(colleft);\n                for(int j = 0; j < cities.size(); j++){\n                    if(map[user.getrow()][user.getcol()].getLetter() == cities[j].getletter()){\n                        user.addpoints(cities[j].getpoints());\n                        user.addmoney(cities[j].getmoney());\n                        user.addarmysize(cities[j].getarmysize());\n                    }\n                }\n            }\n            else if(map[user.getrow()][colleft].isLand() == true){\n                user.setcol(colleft);\n                user.addpoints(2);\n                user.addmoney(20);\n                user.addarmysize(10);\n            }\n        }\n        else if(isoutofbounds(user.getrow(), colleft) == true){\n            cout << \"You fell off the side of the map\" << endl;\n        }\n    }\n    findfreewar(user.getrow(), user.getcol());\n}\n\n//generates random direction for other heros to travel when running in the background\nvoid Game::updateotherheroes(){\n    for(int i = 0; i < heroes.size(); i++){\n        int num = randommove();\n        if(user.getname() == heroes[i].getname()){\n            continue;\n        }\n        else{\n            if(num = 1){ // north\n                int rowup = heroes[i].getrow() - 1;\n                if(isoutofbounds(rowup, heroes[i].getcol()) == false){\n                    if(map[rowup][heroes[i].getcol()].isWater() == true && heroes[i].getship() == true){\n                        heroes[i].setrow(rowup);\n                        heroes[i].addpoints(1);\n                        heroes[i].addmoney(10);\n                    }\n                    else if(map[rowup][heroes[i].getcol()].isWater() == true && heroes[i].getship() == false){\n                    }\n                    if(map[rowup][heroes[i].getcol()].isCity() == true){\n                        heroes[i].setrow(rowup);\n                        for(int j = 0; j < cities.size(); j++){\n                            if(map[rowup][heroes[i].getcol()].getLetter() == cities[j].getletter()){\n                                heroes[i].addpoints(cities[j].getpoints());\n                                heroes[i].addmoney(cities[j].getmoney());\n                                heroes[i].addarmysize(cities[j].getarmysize());\n                            }\n                        }\n                    }\n                    else if(map[rowup][heroes[i].getcol()].isLand() == true){\n                        heroes[i].setrow(rowup);\n                        heroes[i].addpoints(2);\n                        heroes[i].addmoney(20);\n                        heroes[i].addarmysize(10);\n                    }\n                }\n            }\n            else if(num = 2){ // south\n                int rowdown = heroes[i].getrow() + 1;\n                if(isoutofbounds(rowdown, heroes[i].getcol()) == false){\n                    if(map[rowdown][heroes[i].getcol()].isWater() == true && heroes[i].getship() == true){\n                        heroes[i].setrow(rowdown);\n                        heroes[i].addpoints(1);\n                        heroes[i].addmoney(10);\n                    }\n                    else if(map[rowdown][heroes[i].getcol()].isWater() == true && heroes[i].getship() == false){\n                    }\n                    if(map[rowdown][heroes[i].getcol()].isCity() == true){\n                        heroes[i].setrow(rowdown);\n                        for(int j = 0; j < cities.size(); j++){\n                            if(map[heroes[i].getrow()][heroes[i].getcol()].getLetter() == cities[j].getletter()){\n                                heroes[i].addpoints(cities[j].getpoints());\n                                heroes[i].addmoney(cities[j].getmoney());\n                                heroes[i].addarmysize(cities[j].getarmysize());\n                            }\n                        }\n                    }\n                    else if(map[rowdown][heroes[i].getcol()].isLand() == true){\n                        heroes[i].setrow(rowdown);\n                        heroes[i].addpoints(2);\n                        heroes[i].addmoney(20);\n                        heroes[i].addarmysize(10);\n                    }\n                }\n            }\n            else if(num = 3){ // east\n                int colright = heroes[i].getcol() + 1;\n                if(isoutofbounds(heroes[i].getrow(), colright) == false){\n                    if(map[heroes[i].getrow()][colright].isWater() == true && heroes[i].getship() == true){\n                        heroes[i].setcol(colright);\n                        heroes[i].addpoints(1);\n                        heroes[i].addmoney(10);\n                    }\n                    else if(map[heroes[i].getrow()][colright].isWater() == true && heroes[i].getship() == false){\n                        \n                    }\n                    if(map[heroes[i].getrow()][colright].isCity() == true){\n                        heroes[i].setcol(colright);\n                        for(int j = 0; j < cities.size(); j++){\n                            if(map[heroes[i].getrow()][heroes[i].getcol()].getLetter() == cities[j].getletter()){\n                                heroes[i].addpoints(cities[j].getpoints());\n                                heroes[i].addmoney(cities[j].getmoney());\n                                heroes[i].addarmysize(cities[j].getarmysize());\n                            }\n                        }\n                    }\n                    else if(map[heroes[i].getrow()][colright].isLand() == true){\n                        heroes[i].setcol(colright);\n                        heroes[i].addpoints(2);\n                        heroes[i].addmoney(20);\n                        heroes[i].addarmysize(10);\n                    }\n                }\n            }\n            else if(num = 4){ // west\n                int colleft = heroes[i].getcol() - 1;\n                if(isoutofbounds(heroes[i].getrow(), colleft) == false){\n                    if(map[heroes[i].getrow()][colleft].isWater() == true && heroes[i].getship() == true){\n                        heroes[i].setcol(colleft);\n                        heroes[i].addpoints(1);\n                        heroes[i].addmoney(10);\n                    }\n                    else if(map[heroes[i].getrow()][colleft].isWater() == true && heroes[i].getship() == false){\n                        cout << \"Cant travel to water without ship.\" << endl;\n                    }\n                    if(map[heroes[i].getrow()][colleft].isCity() == true){\n                        heroes[i].setcol(colleft);\n                        for(int j = 0; j < cities.size(); j++){\n                            if(map[heroes[i].getrow()][heroes[i].getcol()].getLetter() == cities[j].getletter()){\n                                heroes[i].addpoints(cities[j].getpoints());\n                                heroes[i].addmoney(cities[j].getmoney());\n                                heroes[i].addarmysize(cities[j].getarmysize());\n                            }\n                        }\n                    }\n                    else if(map[heroes[i].getrow()][colleft].isLand() == true){\n                        heroes[i].setcol(colleft);\n                        heroes[i].addpoints(2);\n                        heroes[i].addmoney(20);\n                        heroes[i].addarmysize(10);\n                    }\n                }\n            }\n        }\n    }\n    cout << \"All other heroes updated.\" << endl;\n}\n\n//when user chooses to rest for their turn\nbool Game::rest(){\n    //run code for when user deciedes to rest for their turn\n    //\n    //update resources based on this action \n    for(int i = 0; i < user.getvectorsize(); i++){\n        user.getwarrior(i).addstrength(1);\n    }\n}\n\n//\"consult the gods\" when the user chooses to do so for their turn\nbool Game::consult(){\n    //run code for if user decides\n    for(int i = 0; i < user.getvectorsize(); i++){\n        user.getwarrior(i).addmorale(1);\n    }\n}\n\n//generate random number that will be used for N, S, E, W\nint Game::randommove(){\n    //calculate a random direction for the user to move if they choose travel\n    srand (time(NULL));\n    int num = rand() % 4 + 1;\n    return num;\n}\n\n//run algorithm and calculate probability user will win encounter when user chooses to give speech\nbool Game::givespeech(int num){\n    //run code for if the user chooses to to give a speech during an encounter\n    double probability = (1.0-(double(heroes[num].getwarrior(0).getmorale())/100.0)* (user.getinfluence()/1600.0));\n    probability = probability * 100;\n    cout << probability << endl;\n    srand (time(NULL));\n    int poss = rand() % 99 + 1;\n    if(poss < probability || poss == 1){ // user wins\n        cout << heroes[num].getname() << \" has retired.\" << endl;\n        for(int i = 0; i < heroes[num].getvectorsize(); i++){\n            if(user.getvectorsize() < 4){\n                user.addwarrior(heroes[num].getwarrior(i));\n            }\n        }\n        user.addmoney(heroes[num].getmoney());\n        user.addinfluence(heroes[num].getinfluence());\n        user.addarmysize(heroes[num].getarmysize());\n    }\n    else if(poss > probability || poss == 0){ // user loses\n        user.setinfluence(user.getinfluence() / 2);\n    }\n    \n}\n\n\n//run algorithm and calculate probablilty the user will win the encounter when chooses to buy out opponent\nbool Game::buyout(int num){\n    //run code for if user chooses to buyout in an encounter\n    double probability = (1.0-(double(heroes[num].getwarrior(0).getloyalty())/100.0)* (user.getmoney()/17800.0));\n    probability = probability * 100;\n    cout << probability << endl;\n    srand (time(NULL));\n    int poss = rand() % 99 + 1;\n    if(poss < probability || poss == 1){ // user wins\n        cout << heroes[num].getname() << \" has retired.\" << endl;\n        for(int i = 0; i < heroes[num].getvectorsize(); i++){\n            if(user.getvectorsize() < 4){\n                user.addwarrior(heroes[num].getwarrior(i));\n            }\n        }\n        user.addmoney(heroes[num].getmoney());\n        user.addinfluence(heroes[num].getinfluence());\n        user.addarmysize(heroes[num].getarmysize());\n    }\n    else if(poss > probability || poss == 0){ // user loses\n        user.setmoney(user.getmoney() / 2);\n    }\n}\n\n//run algorithm and calculate probability that the user will win encouinter when choosing to battle\nbool Game::battle(int num){\n    //run code for if user chooses to battle in an encounter\n    int cpu = 4;\n    srand (time(NULL));\n    int userbattlevalue = 0;\n    int cpubattlevalue = 0;\n    int size = 0;\n    if((user.getvectorsize() == 0 && heroes[num].getvectorsize() > 0) || (user.getvectorsize() > 0 && heroes[num].getvectorsize() == 0)){ // one of the heros has no warriors\n        if(heroes[num].getvectorsize() == 0){\n            cout << heroes[num].getname() << \" has retired.\" << endl;\n            for(int i = 0; i < heroes[num].getvectorsize(); i++){\n                if(user.getvectorsize() < 4){\n                    user.addwarrior(heroes[num].getwarrior(i));\n                }\n            }\n        user.addmoney(heroes[num].getmoney());\n        user.addinfluence(heroes[num].getinfluence());\n        user.addarmysize(heroes[num].getarmysize());\n        }\n        else if(user.getvectorsize() == 0){\n            cout << \"You have died in the battle\" << endl;\n            setgameover(true);\n        }\n    }\n    else if(user.getvectorsize() > 0 && heroes[num].getvectorsize() > 0){ //both heros have warriors\n        cout << \"Please choose a warrior to represent you in battle(Answer in #):\" << endl;\n        for(int i = 1; i <= user.getvectorsize(); i++){\n            cout << i << \": \" << user.getwarrior(i - 1).getname() << endl;\n        }\n        int answer;\n        cin >> answer;\n        size = heroes[num].getvectorsize();\n        while(cpu >= size){\n            cpu = rand() % 4;\n        }\n        userbattlevalue = (user.getarmysize() * user.getwarrior(answer - 1).getstrength());\n        cpubattlevalue = (heroes[num].getarmysize() * heroes[num].getwarrior(cpu).getstrength());\n        if(userbattlevalue > cpubattlevalue){ // user wins\n            cout << heroes[num].getname() << \" has retired.\" << endl;\n            for(int i = 0; i < heroes[num].getvectorsize(); i++){\n                if(user.getvectorsize() < 4){\n                    user.addwarrior(heroes[num].getwarrior(i));\n                }\n            }\n            user.addmoney(heroes[num].getmoney());\n            user.addinfluence(heroes[num].getinfluence());\n            user.addarmysize(heroes[num].getarmysize());\n        }\n        else if(userbattlevalue < cpubattlevalue){ // user loses\n            cout << \"You have died in the battle\" << endl;\n            setgameover(true);\n        }\n    }\n}\n\n\n\nbool Game::getgameover(){\n    return gameover;\n}\n\nvoid Game::setgameover(bool end){\n    gameover = end;\n}\n\n//scan for roaming warriors nearby user and attempt to pick them up\nvoid Game::findfreewar(int row, int col){\n    bool flag = false;\n    int idx = 0;\n    for(int i = 0; i < warriors1.size(); i++){\n        if(abs(col - warriors1[i].getcol()) < 3 && abs(row - warriors1[i].getrow()) < 3){\n            flag = true;\n            idx = i;\n        }\n    }\n    if(flag == true){\n        if(user.getvectorsize() < 4){\n            user.addwarrior(warriors1[idx]);\n            cout << \"You have added a new warrior, \" << warriors1[idx].getname() << endl;\n            warriors1[idx].addmorale(10);\n        }\n    }\n    \n    \n}\n\n\nint Game::generaterow(){\n    srand (time(NULL));\n    int num = rand() % 26;\n    return num;\n    \n}\n\nint Game::generatecol(){\n    srand (time(NULL));\n    int num = rand() % 17;\n    return num;\n}\n\n//spread 5 peices of dragon glass randomly across the map\nvoid Game::initiatedg(){\n    int count = 0;\n    while(count < 5){ //place 5 random dragonglass\n        int r = generaterow();\n        int c = generatecol();\n        if(map[r][c].getLetter() != \"w\"){\n            map[r][c].setdragonglass(true);\n            count ++;\n        }\n    }\n}\n\n//scatter free warriors randomly across the map\nvoid Game::setwarriors(){\n    bool flag;\n    for(int i = 0; i < warriors1.size(); i++){\n        flag = false;\n        while(flag == false){\n            int r = generaterow();\n            int c = generatecol();\n            if(warriors1[i].getisfree() == true && warriors1[i].getship() == true){\n                if(map[r][c].getLetter() == \"w\"){\n                    warriors1[i].setlocation(r,c);\n                    flag = true;\n                }\n            }\n            else if(warriors1[i].getisfree() == true && warriors1[i].getship() == false){\n                if(map[r][c].getLetter() == \"p\"){\n                    warriors1[i].setlocation(r,c);\n                    flag = true;\n                }\n            }\n            else if(warriors1[i].getisfree() == false){\n                flag = true;\n            }\n        }\n    }\n    return;\n}\n\n//input coordinates and test if the are in bounds - helper function\nbool Game::isoutofbounds(int row, int col){\n    if((row < 1 || row > 25) || (col < 1 || col > 16)){\n        return true;  \n    }\n    else{\n        return false;\n    }\n}\n\n//calculate probabilites for random events and run them\nvoid Game::randomevents(){\n    srand (time(NULL));\n    int num = rand() % 120;\n    if(num >= 0 && num < 30){ //drought\n        for(int i = 0; i < user.getvectorsize(); i++){\n            user.getwarrior(i).setmorale(user.getwarrior(i).getmorale() - 10);\n            user.getwarrior(i).setstrength(user.getwarrior(i).getstrength() - 10);\n        }\n    }\n    else if(num >= 30 && num < 60){ // deserters\n        user.setarmysize(user.getarmysize() - 10);\n        for(int i = 0; i < user.getvectorsize(); i++){\n            user.getwarrior(i).setloyalty(user.getwarrior(i).getloyalty() - 10);\n        }\n    }\n    else if(num >= 60 && num < 90){ // jackpot\n        user.setmoney(user.getmoney() * 2);\n    }\n    else if(num >= 90 && num < 120){ // kindness\n        user.addarmysize(10);\n        for(int i = 0; i < user.getvectorsize(); i++){\n            user.getwarrior(i).addloyalty(10);\n        }\n    }\n    \n    \n}\n\n//add dragon to daenerys on the 10h turn\nvoid Game::adddragon(){\n    for(int i = 0; i < heroes.size(); i++){\n        if (heroes[i].getname() == \"Daenerys Targaryen\"){\n            if(heroes[i].getvectorsize() == 4){\n                heroes[i].removewarrior();\n                heroes[i].addwarrior(Warrior(\"Dragon\", int(180 * 1.10), int(100 *1.10) , int(80 * 1.10), false, false, false));\n               \n            }\n            else{\n                heroes[i].addwarrior(Warrior(\"Dragon\", 180, 100, 80, false, false, false));\n            }\n        }\n    }\n}\n       \n//remove stannis from the game on the 10th turn\nvoid Game::stannis(){\n    for(int i = 0; i < heroes.size(); i++){\n        if (heroes[i].getname() == \"Stannis Baratheon\"){\n            for(int j = 0; j < heroes[i].getvectorsize(); i++){\n                heroes[i].getwarrior(j).setisfree(true);\n            }\n            heroes.erase(heroes.begin() + i);\n        }\n    }\n    cout << \"Stannis has retired. Press F to pay respects.\" << endl;\n    string word;\n    cin>> word;\n    if(word != \"F\" || word != \"f\"){\n       cout <<  \"Have you no respect?! Press F to pay respects.\" << endl;\n    }\n    \n}\n        \n//give sansa a new warrior on the 10th turn\nvoid Game::sansa(){\n    for(int i = 0; i < heroes.size(); i++){\n        if(heroes[i].getname() == \"Sansa Stark\"){\n            heroes[i].addwarrior(Warrior(\"Arya Stark\", 200, 100, 60, true, false, false));\n        }\n    }\n}\n\n//remove jaime as a warrior for cersei on the  10th turn        \nvoid Game::cersei(){\n    for(int i = 0; i < heroes.size(); i++){\n        if(heroes[i].getname() == \"Cersei Lannister\"){\n            heroes[i].erasewarrior(\"Jaime Lannister\");\n        }\n    }\n}\n\n//run all 10th turn functions at the same time       \nvoid Game::mandatory(){\n    adddragon();\n    stannis();\n    sansa();\n    cersei();\n}","undoManager":{"mark":-231,"position":100,"stack":[[{"start":{"row":990,"column":26},"end":{"row":990,"column":27},"action":"insert","lines":["o"],"id":23875},{"start":{"row":990,"column":27},"end":{"row":990,"column":28},"action":"insert","lines":["r"]}],[{"start":{"row":990,"column":35},"end":{"row":990,"column":36},"action":"insert","lines":[" "],"id":23876},{"start":{"row":990,"column":36},"end":{"row":990,"column":37},"action":"insert","lines":["e"]},{"start":{"row":990,"column":37},"end":{"row":990,"column":38},"action":"insert","lines":["v"]},{"start":{"row":990,"column":38},"end":{"row":990,"column":39},"action":"insert","lines":["e"]},{"start":{"row":990,"column":39},"end":{"row":990,"column":40},"action":"insert","lines":["n"]},{"start":{"row":990,"column":40},"end":{"row":990,"column":41},"action":"insert","lines":["t"]},{"start":{"row":990,"column":41},"end":{"row":990,"column":42},"action":"insert","lines":["s"]}],[{"start":{"row":990,"column":42},"end":{"row":990,"column":43},"action":"insert","lines":[" "],"id":23877},{"start":{"row":990,"column":43},"end":{"row":990,"column":44},"action":"insert","lines":["a"]},{"start":{"row":990,"column":44},"end":{"row":990,"column":45},"action":"insert","lines":["n"]},{"start":{"row":990,"column":45},"end":{"row":990,"column":46},"action":"insert","lines":["d"]}],[{"start":{"row":990,"column":46},"end":{"row":990,"column":47},"action":"insert","lines":[" "],"id":23878}],[{"start":{"row":990,"column":47},"end":{"row":990,"column":48},"action":"insert","lines":["r"],"id":23879},{"start":{"row":990,"column":48},"end":{"row":990,"column":49},"action":"insert","lines":["u"]},{"start":{"row":990,"column":49},"end":{"row":990,"column":50},"action":"insert","lines":["n"]}],[{"start":{"row":990,"column":50},"end":{"row":990,"column":51},"action":"insert","lines":[" "],"id":23880},{"start":{"row":990,"column":51},"end":{"row":990,"column":52},"action":"insert","lines":["t"]},{"start":{"row":990,"column":52},"end":{"row":990,"column":53},"action":"insert","lines":["h"]},{"start":{"row":990,"column":53},"end":{"row":990,"column":54},"action":"insert","lines":["e"]},{"start":{"row":990,"column":54},"end":{"row":990,"column":55},"action":"insert","lines":["m"]}],[{"start":{"row":1018,"column":0},"end":{"row":1019,"column":0},"action":"insert","lines":["",""],"id":23881},{"start":{"row":1019,"column":0},"end":{"row":1019,"column":1},"action":"insert","lines":["/"]},{"start":{"row":1019,"column":1},"end":{"row":1019,"column":2},"action":"insert","lines":["/"]}],[{"start":{"row":1019,"column":2},"end":{"row":1019,"column":3},"action":"insert","lines":["a"],"id":23882},{"start":{"row":1019,"column":3},"end":{"row":1019,"column":4},"action":"insert","lines":["d"]},{"start":{"row":1019,"column":4},"end":{"row":1019,"column":5},"action":"insert","lines":["d"]}],[{"start":{"row":1019,"column":5},"end":{"row":1019,"column":6},"action":"insert","lines":[" "],"id":23883},{"start":{"row":1019,"column":6},"end":{"row":1019,"column":7},"action":"insert","lines":["d"]},{"start":{"row":1019,"column":7},"end":{"row":1019,"column":8},"action":"insert","lines":["r"]},{"start":{"row":1019,"column":8},"end":{"row":1019,"column":9},"action":"insert","lines":["a"]},{"start":{"row":1019,"column":9},"end":{"row":1019,"column":10},"action":"insert","lines":["g"]},{"start":{"row":1019,"column":10},"end":{"row":1019,"column":11},"action":"insert","lines":["o"]},{"start":{"row":1019,"column":11},"end":{"row":1019,"column":12},"action":"insert","lines":["n"]}],[{"start":{"row":1019,"column":12},"end":{"row":1019,"column":13},"action":"insert","lines":[" "],"id":23884},{"start":{"row":1019,"column":13},"end":{"row":1019,"column":14},"action":"insert","lines":["t"]},{"start":{"row":1019,"column":14},"end":{"row":1019,"column":15},"action":"insert","lines":["o"]}],[{"start":{"row":1019,"column":15},"end":{"row":1019,"column":16},"action":"insert","lines":[" "],"id":23885},{"start":{"row":1019,"column":16},"end":{"row":1019,"column":17},"action":"insert","lines":["d"]}],[{"start":{"row":1019,"column":17},"end":{"row":1019,"column":18},"action":"insert","lines":["a"],"id":23886},{"start":{"row":1019,"column":18},"end":{"row":1019,"column":19},"action":"insert","lines":["e"]}],[{"start":{"row":1019,"column":19},"end":{"row":1019,"column":20},"action":"insert","lines":["n"],"id":23887},{"start":{"row":1019,"column":20},"end":{"row":1019,"column":21},"action":"insert","lines":["e"]},{"start":{"row":1019,"column":21},"end":{"row":1019,"column":22},"action":"insert","lines":["r"]},{"start":{"row":1019,"column":22},"end":{"row":1019,"column":23},"action":"insert","lines":["y"]},{"start":{"row":1019,"column":23},"end":{"row":1019,"column":24},"action":"insert","lines":["s"]}],[{"start":{"row":1019,"column":24},"end":{"row":1019,"column":25},"action":"insert","lines":[" "],"id":23888},{"start":{"row":1019,"column":25},"end":{"row":1019,"column":26},"action":"insert","lines":["o"]},{"start":{"row":1019,"column":26},"end":{"row":1019,"column":27},"action":"insert","lines":["n"]}],[{"start":{"row":1019,"column":27},"end":{"row":1019,"column":28},"action":"insert","lines":[" "],"id":23889},{"start":{"row":1019,"column":28},"end":{"row":1019,"column":29},"action":"insert","lines":["t"]},{"start":{"row":1019,"column":29},"end":{"row":1019,"column":30},"action":"insert","lines":["e"]},{"start":{"row":1019,"column":30},"end":{"row":1019,"column":31},"action":"insert","lines":["h"]}],[{"start":{"row":1019,"column":30},"end":{"row":1019,"column":31},"action":"remove","lines":["h"],"id":23890},{"start":{"row":1019,"column":29},"end":{"row":1019,"column":30},"action":"remove","lines":["e"]}],[{"start":{"row":1019,"column":29},"end":{"row":1019,"column":30},"action":"insert","lines":["h"],"id":23891},{"start":{"row":1019,"column":30},"end":{"row":1019,"column":31},"action":"insert","lines":["e"]}],[{"start":{"row":1019,"column":31},"end":{"row":1019,"column":32},"action":"insert","lines":[" "],"id":23892},{"start":{"row":1019,"column":32},"end":{"row":1019,"column":33},"action":"insert","lines":["1"]},{"start":{"row":1019,"column":33},"end":{"row":1019,"column":34},"action":"insert","lines":["0"]}],[{"start":{"row":1019,"column":34},"end":{"row":1019,"column":35},"action":"insert","lines":["h"],"id":23893}],[{"start":{"row":1019,"column":35},"end":{"row":1019,"column":36},"action":"insert","lines":[" "],"id":23894},{"start":{"row":1019,"column":36},"end":{"row":1019,"column":37},"action":"insert","lines":["t"]},{"start":{"row":1019,"column":37},"end":{"row":1019,"column":38},"action":"insert","lines":["u"]},{"start":{"row":1019,"column":38},"end":{"row":1019,"column":39},"action":"insert","lines":["r"]},{"start":{"row":1019,"column":39},"end":{"row":1019,"column":40},"action":"insert","lines":["n"]}],[{"start":{"row":1026,"column":15},"end":{"row":1027,"column":15},"action":"remove","lines":[" ","               "],"id":23895}],[{"start":{"row":1034,"column":7},"end":{"row":1035,"column":0},"action":"insert","lines":["",""],"id":23896},{"start":{"row":1035,"column":0},"end":{"row":1035,"column":7},"action":"insert","lines":["       "]},{"start":{"row":1035,"column":7},"end":{"row":1035,"column":8},"action":"insert","lines":["/"]},{"start":{"row":1035,"column":8},"end":{"row":1035,"column":9},"action":"insert","lines":["/"]}],[{"start":{"row":1035,"column":8},"end":{"row":1035,"column":9},"action":"remove","lines":["/"],"id":23897},{"start":{"row":1035,"column":7},"end":{"row":1035,"column":8},"action":"remove","lines":["/"]},{"start":{"row":1035,"column":6},"end":{"row":1035,"column":7},"action":"remove","lines":[" "]},{"start":{"row":1035,"column":5},"end":{"row":1035,"column":6},"action":"remove","lines":[" "]},{"start":{"row":1035,"column":4},"end":{"row":1035,"column":5},"action":"remove","lines":[" "]},{"start":{"row":1035,"column":0},"end":{"row":1035,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":1035,"column":0},"end":{"row":1035,"column":1},"action":"insert","lines":["/"],"id":23898},{"start":{"row":1035,"column":1},"end":{"row":1035,"column":2},"action":"insert","lines":["/"]}],[{"start":{"row":1035,"column":2},"end":{"row":1035,"column":3},"action":"insert","lines":["r"],"id":23899},{"start":{"row":1035,"column":3},"end":{"row":1035,"column":4},"action":"insert","lines":["e"]},{"start":{"row":1035,"column":4},"end":{"row":1035,"column":5},"action":"insert","lines":["m"]},{"start":{"row":1035,"column":5},"end":{"row":1035,"column":6},"action":"insert","lines":["o"]},{"start":{"row":1035,"column":6},"end":{"row":1035,"column":7},"action":"insert","lines":["v"]},{"start":{"row":1035,"column":7},"end":{"row":1035,"column":8},"action":"insert","lines":["e"]}],[{"start":{"row":1035,"column":8},"end":{"row":1035,"column":9},"action":"insert","lines":[" "],"id":23900}],[{"start":{"row":1035,"column":9},"end":{"row":1035,"column":10},"action":"insert","lines":["s"],"id":23901},{"start":{"row":1035,"column":10},"end":{"row":1035,"column":11},"action":"insert","lines":["t"]},{"start":{"row":1035,"column":11},"end":{"row":1035,"column":12},"action":"insert","lines":["a"]},{"start":{"row":1035,"column":12},"end":{"row":1035,"column":13},"action":"insert","lines":["n"]},{"start":{"row":1035,"column":13},"end":{"row":1035,"column":14},"action":"insert","lines":["n"]},{"start":{"row":1035,"column":14},"end":{"row":1035,"column":15},"action":"insert","lines":["i"]},{"start":{"row":1035,"column":15},"end":{"row":1035,"column":16},"action":"insert","lines":["s"]}],[{"start":{"row":1035,"column":16},"end":{"row":1035,"column":17},"action":"insert","lines":[" "],"id":23902},{"start":{"row":1035,"column":17},"end":{"row":1035,"column":18},"action":"insert","lines":["f"]},{"start":{"row":1035,"column":18},"end":{"row":1035,"column":19},"action":"insert","lines":["r"]},{"start":{"row":1035,"column":19},"end":{"row":1035,"column":20},"action":"insert","lines":["i"]},{"start":{"row":1035,"column":20},"end":{"row":1035,"column":21},"action":"insert","lines":["m"]}],[{"start":{"row":1035,"column":20},"end":{"row":1035,"column":21},"action":"remove","lines":["m"],"id":23903},{"start":{"row":1035,"column":19},"end":{"row":1035,"column":20},"action":"remove","lines":["i"]}],[{"start":{"row":1035,"column":19},"end":{"row":1035,"column":20},"action":"insert","lines":["o"],"id":23904},{"start":{"row":1035,"column":20},"end":{"row":1035,"column":21},"action":"insert","lines":["m"]}],[{"start":{"row":1035,"column":21},"end":{"row":1035,"column":22},"action":"insert","lines":[" "],"id":23905},{"start":{"row":1035,"column":22},"end":{"row":1035,"column":23},"action":"insert","lines":["h"]},{"start":{"row":1035,"column":23},"end":{"row":1035,"column":24},"action":"insert","lines":["e"]}],[{"start":{"row":1035,"column":23},"end":{"row":1035,"column":24},"action":"remove","lines":["e"],"id":23906},{"start":{"row":1035,"column":22},"end":{"row":1035,"column":23},"action":"remove","lines":["h"]}],[{"start":{"row":1035,"column":22},"end":{"row":1035,"column":23},"action":"insert","lines":["t"],"id":23907},{"start":{"row":1035,"column":23},"end":{"row":1035,"column":24},"action":"insert","lines":["e"]}],[{"start":{"row":1035,"column":23},"end":{"row":1035,"column":24},"action":"remove","lines":["e"],"id":23908}],[{"start":{"row":1035,"column":23},"end":{"row":1035,"column":24},"action":"insert","lines":["h"],"id":23909},{"start":{"row":1035,"column":24},"end":{"row":1035,"column":25},"action":"insert","lines":["e"]}],[{"start":{"row":1035,"column":25},"end":{"row":1035,"column":26},"action":"insert","lines":[" "],"id":23910},{"start":{"row":1035,"column":26},"end":{"row":1035,"column":27},"action":"insert","lines":["g"]},{"start":{"row":1035,"column":27},"end":{"row":1035,"column":28},"action":"insert","lines":["a"]},{"start":{"row":1035,"column":28},"end":{"row":1035,"column":29},"action":"insert","lines":["m"]},{"start":{"row":1035,"column":29},"end":{"row":1035,"column":30},"action":"insert","lines":["e"]}],[{"start":{"row":1035,"column":30},"end":{"row":1035,"column":31},"action":"insert","lines":[" "],"id":23911},{"start":{"row":1035,"column":31},"end":{"row":1035,"column":32},"action":"insert","lines":["o"]},{"start":{"row":1035,"column":32},"end":{"row":1035,"column":33},"action":"insert","lines":["n"]}],[{"start":{"row":1035,"column":33},"end":{"row":1035,"column":34},"action":"insert","lines":[" "],"id":23912},{"start":{"row":1035,"column":34},"end":{"row":1035,"column":35},"action":"insert","lines":["t"]},{"start":{"row":1035,"column":35},"end":{"row":1035,"column":36},"action":"insert","lines":["h"]},{"start":{"row":1035,"column":36},"end":{"row":1035,"column":37},"action":"insert","lines":["e"]}],[{"start":{"row":1035,"column":37},"end":{"row":1035,"column":38},"action":"insert","lines":[" "],"id":23913},{"start":{"row":1035,"column":38},"end":{"row":1035,"column":39},"action":"insert","lines":["1"]},{"start":{"row":1035,"column":39},"end":{"row":1035,"column":40},"action":"insert","lines":["0"]},{"start":{"row":1035,"column":40},"end":{"row":1035,"column":41},"action":"insert","lines":["t"]},{"start":{"row":1035,"column":41},"end":{"row":1035,"column":42},"action":"insert","lines":["h"]}],[{"start":{"row":1035,"column":42},"end":{"row":1035,"column":43},"action":"insert","lines":[" "],"id":23914},{"start":{"row":1035,"column":43},"end":{"row":1035,"column":44},"action":"insert","lines":["t"]},{"start":{"row":1035,"column":44},"end":{"row":1035,"column":45},"action":"insert","lines":["u"]},{"start":{"row":1035,"column":45},"end":{"row":1035,"column":46},"action":"insert","lines":["r"]},{"start":{"row":1035,"column":46},"end":{"row":1035,"column":47},"action":"insert","lines":["n"]}],[{"start":{"row":1053,"column":8},"end":{"row":1054,"column":0},"action":"insert","lines":["",""],"id":23915},{"start":{"row":1054,"column":0},"end":{"row":1054,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":1054,"column":4},"end":{"row":1054,"column":8},"action":"remove","lines":["    "],"id":23916},{"start":{"row":1054,"column":0},"end":{"row":1054,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":1054,"column":0},"end":{"row":1054,"column":1},"action":"insert","lines":["g"],"id":23917},{"start":{"row":1054,"column":1},"end":{"row":1054,"column":2},"action":"insert","lines":["i"]},{"start":{"row":1054,"column":2},"end":{"row":1054,"column":3},"action":"insert","lines":["v"]},{"start":{"row":1054,"column":3},"end":{"row":1054,"column":4},"action":"insert","lines":["e"]}],[{"start":{"row":1054,"column":4},"end":{"row":1054,"column":5},"action":"insert","lines":[" "],"id":23918}],[{"start":{"row":1054,"column":4},"end":{"row":1054,"column":5},"action":"remove","lines":[" "],"id":23919},{"start":{"row":1054,"column":3},"end":{"row":1054,"column":4},"action":"remove","lines":["e"]},{"start":{"row":1054,"column":2},"end":{"row":1054,"column":3},"action":"remove","lines":["v"]},{"start":{"row":1054,"column":1},"end":{"row":1054,"column":2},"action":"remove","lines":["i"]},{"start":{"row":1054,"column":0},"end":{"row":1054,"column":1},"action":"remove","lines":["g"]}],[{"start":{"row":1054,"column":0},"end":{"row":1054,"column":1},"action":"insert","lines":["/"],"id":23920},{"start":{"row":1054,"column":1},"end":{"row":1054,"column":2},"action":"insert","lines":["/"]},{"start":{"row":1054,"column":2},"end":{"row":1054,"column":3},"action":"insert","lines":["g"]},{"start":{"row":1054,"column":3},"end":{"row":1054,"column":4},"action":"insert","lines":["i"]},{"start":{"row":1054,"column":4},"end":{"row":1054,"column":5},"action":"insert","lines":["v"]},{"start":{"row":1054,"column":5},"end":{"row":1054,"column":6},"action":"insert","lines":["e"]}],[{"start":{"row":1054,"column":6},"end":{"row":1054,"column":7},"action":"insert","lines":[" "],"id":23921},{"start":{"row":1054,"column":7},"end":{"row":1054,"column":8},"action":"insert","lines":["s"]},{"start":{"row":1054,"column":8},"end":{"row":1054,"column":9},"action":"insert","lines":["a"]},{"start":{"row":1054,"column":9},"end":{"row":1054,"column":10},"action":"insert","lines":["n"]},{"start":{"row":1054,"column":10},"end":{"row":1054,"column":11},"action":"insert","lines":["s"]},{"start":{"row":1054,"column":11},"end":{"row":1054,"column":12},"action":"insert","lines":["a"]}],[{"start":{"row":1054,"column":12},"end":{"row":1054,"column":13},"action":"insert","lines":[" "],"id":23922}],[{"start":{"row":1054,"column":13},"end":{"row":1054,"column":14},"action":"insert","lines":["a"],"id":23923}],[{"start":{"row":1054,"column":14},"end":{"row":1054,"column":15},"action":"insert","lines":[" "],"id":23924},{"start":{"row":1054,"column":15},"end":{"row":1054,"column":16},"action":"insert","lines":["n"]},{"start":{"row":1054,"column":16},"end":{"row":1054,"column":17},"action":"insert","lines":["e"]}],[{"start":{"row":1054,"column":17},"end":{"row":1054,"column":18},"action":"insert","lines":[" "],"id":23925},{"start":{"row":1054,"column":18},"end":{"row":1054,"column":19},"action":"insert","lines":["a"]},{"start":{"row":1054,"column":19},"end":{"row":1054,"column":20},"action":"insert","lines":["w"]}],[{"start":{"row":1054,"column":19},"end":{"row":1054,"column":20},"action":"remove","lines":["w"],"id":23926},{"start":{"row":1054,"column":18},"end":{"row":1054,"column":19},"action":"remove","lines":["a"]}],[{"start":{"row":1054,"column":18},"end":{"row":1054,"column":19},"action":"insert","lines":["w"],"id":23927},{"start":{"row":1054,"column":19},"end":{"row":1054,"column":20},"action":"insert","lines":["a"]}],[{"start":{"row":1054,"column":19},"end":{"row":1054,"column":20},"action":"remove","lines":["a"],"id":23928},{"start":{"row":1054,"column":18},"end":{"row":1054,"column":19},"action":"remove","lines":["w"]},{"start":{"row":1054,"column":17},"end":{"row":1054,"column":18},"action":"remove","lines":[" "]}],[{"start":{"row":1054,"column":17},"end":{"row":1054,"column":18},"action":"insert","lines":["w"],"id":23929}],[{"start":{"row":1054,"column":18},"end":{"row":1054,"column":19},"action":"insert","lines":[" "],"id":23930},{"start":{"row":1054,"column":19},"end":{"row":1054,"column":20},"action":"insert","lines":["w"]},{"start":{"row":1054,"column":20},"end":{"row":1054,"column":21},"action":"insert","lines":["a"]},{"start":{"row":1054,"column":21},"end":{"row":1054,"column":22},"action":"insert","lines":["r"]},{"start":{"row":1054,"column":22},"end":{"row":1054,"column":23},"action":"insert","lines":["r"]},{"start":{"row":1054,"column":23},"end":{"row":1054,"column":24},"action":"insert","lines":["i"]},{"start":{"row":1054,"column":24},"end":{"row":1054,"column":25},"action":"insert","lines":["o"]},{"start":{"row":1054,"column":25},"end":{"row":1054,"column":26},"action":"insert","lines":["r"]}],[{"start":{"row":1054,"column":26},"end":{"row":1054,"column":27},"action":"insert","lines":[" "],"id":23931},{"start":{"row":1054,"column":27},"end":{"row":1054,"column":28},"action":"insert","lines":["o"]},{"start":{"row":1054,"column":28},"end":{"row":1054,"column":29},"action":"insert","lines":["n"]}],[{"start":{"row":1054,"column":29},"end":{"row":1054,"column":30},"action":"insert","lines":[" "],"id":23932},{"start":{"row":1054,"column":30},"end":{"row":1054,"column":31},"action":"insert","lines":["t"]},{"start":{"row":1054,"column":31},"end":{"row":1054,"column":32},"action":"insert","lines":["h"]},{"start":{"row":1054,"column":32},"end":{"row":1054,"column":33},"action":"insert","lines":["e"]}],[{"start":{"row":1054,"column":33},"end":{"row":1054,"column":34},"action":"insert","lines":[" "],"id":23933},{"start":{"row":1054,"column":34},"end":{"row":1054,"column":35},"action":"insert","lines":["1"]},{"start":{"row":1054,"column":35},"end":{"row":1054,"column":36},"action":"insert","lines":["0"]},{"start":{"row":1054,"column":36},"end":{"row":1054,"column":37},"action":"insert","lines":["t"]},{"start":{"row":1054,"column":37},"end":{"row":1054,"column":38},"action":"insert","lines":["h"]}],[{"start":{"row":1054,"column":38},"end":{"row":1054,"column":39},"action":"insert","lines":[" "],"id":23934},{"start":{"row":1054,"column":39},"end":{"row":1054,"column":40},"action":"insert","lines":["t"]},{"start":{"row":1054,"column":40},"end":{"row":1054,"column":41},"action":"insert","lines":["u"]},{"start":{"row":1054,"column":41},"end":{"row":1054,"column":42},"action":"insert","lines":["e"]},{"start":{"row":1054,"column":42},"end":{"row":1054,"column":43},"action":"insert","lines":["n"]}],[{"start":{"row":1054,"column":42},"end":{"row":1054,"column":43},"action":"remove","lines":["n"],"id":23935},{"start":{"row":1054,"column":41},"end":{"row":1054,"column":42},"action":"remove","lines":["e"]}],[{"start":{"row":1054,"column":41},"end":{"row":1054,"column":42},"action":"insert","lines":["r"],"id":23936},{"start":{"row":1054,"column":42},"end":{"row":1054,"column":43},"action":"insert","lines":["n"]}],[{"start":{"row":1062,"column":0},"end":{"row":1063,"column":0},"action":"insert","lines":["",""],"id":23937}],[{"start":{"row":1063,"column":0},"end":{"row":1063,"column":1},"action":"insert","lines":["r"],"id":23938},{"start":{"row":1063,"column":1},"end":{"row":1063,"column":2},"action":"insert","lines":["e"]},{"start":{"row":1063,"column":2},"end":{"row":1063,"column":3},"action":"insert","lines":["m"]},{"start":{"row":1063,"column":3},"end":{"row":1063,"column":4},"action":"insert","lines":["o"]},{"start":{"row":1063,"column":4},"end":{"row":1063,"column":5},"action":"insert","lines":["v"]},{"start":{"row":1063,"column":5},"end":{"row":1063,"column":6},"action":"insert","lines":["e"]}],[{"start":{"row":1063,"column":5},"end":{"row":1063,"column":6},"action":"remove","lines":["e"],"id":23939},{"start":{"row":1063,"column":4},"end":{"row":1063,"column":5},"action":"remove","lines":["v"]},{"start":{"row":1063,"column":3},"end":{"row":1063,"column":4},"action":"remove","lines":["o"]},{"start":{"row":1063,"column":2},"end":{"row":1063,"column":3},"action":"remove","lines":["m"]},{"start":{"row":1063,"column":1},"end":{"row":1063,"column":2},"action":"remove","lines":["e"]},{"start":{"row":1063,"column":0},"end":{"row":1063,"column":1},"action":"remove","lines":["r"]}],[{"start":{"row":1063,"column":0},"end":{"row":1063,"column":1},"action":"insert","lines":["/"],"id":23940},{"start":{"row":1063,"column":1},"end":{"row":1063,"column":2},"action":"insert","lines":["/"]},{"start":{"row":1063,"column":2},"end":{"row":1063,"column":3},"action":"insert","lines":["r"]},{"start":{"row":1063,"column":3},"end":{"row":1063,"column":4},"action":"insert","lines":["e"]},{"start":{"row":1063,"column":4},"end":{"row":1063,"column":5},"action":"insert","lines":["m"]},{"start":{"row":1063,"column":5},"end":{"row":1063,"column":6},"action":"insert","lines":["p"]},{"start":{"row":1063,"column":6},"end":{"row":1063,"column":7},"action":"insert","lines":["v"]},{"start":{"row":1063,"column":7},"end":{"row":1063,"column":8},"action":"insert","lines":["e"]}],[{"start":{"row":1063,"column":7},"end":{"row":1063,"column":8},"action":"remove","lines":["e"],"id":23941},{"start":{"row":1063,"column":6},"end":{"row":1063,"column":7},"action":"remove","lines":["v"]},{"start":{"row":1063,"column":5},"end":{"row":1063,"column":6},"action":"remove","lines":["p"]}],[{"start":{"row":1063,"column":5},"end":{"row":1063,"column":6},"action":"insert","lines":["o"],"id":23942},{"start":{"row":1063,"column":6},"end":{"row":1063,"column":7},"action":"insert","lines":["v"]},{"start":{"row":1063,"column":7},"end":{"row":1063,"column":8},"action":"insert","lines":["e"]}],[{"start":{"row":1063,"column":8},"end":{"row":1063,"column":9},"action":"insert","lines":[" "],"id":23943}],[{"start":{"row":1063,"column":9},"end":{"row":1063,"column":10},"action":"insert","lines":["j"],"id":23944},{"start":{"row":1063,"column":10},"end":{"row":1063,"column":11},"action":"insert","lines":["a"]},{"start":{"row":1063,"column":11},"end":{"row":1063,"column":12},"action":"insert","lines":["i"]},{"start":{"row":1063,"column":12},"end":{"row":1063,"column":13},"action":"insert","lines":["m"]},{"start":{"row":1063,"column":13},"end":{"row":1063,"column":14},"action":"insert","lines":["e"]}],[{"start":{"row":1063,"column":14},"end":{"row":1063,"column":15},"action":"insert","lines":[" "],"id":23945},{"start":{"row":1063,"column":15},"end":{"row":1063,"column":16},"action":"insert","lines":["a"]},{"start":{"row":1063,"column":16},"end":{"row":1063,"column":17},"action":"insert","lines":["s"]}],[{"start":{"row":1063,"column":17},"end":{"row":1063,"column":18},"action":"insert","lines":[" "],"id":23946},{"start":{"row":1063,"column":18},"end":{"row":1063,"column":19},"action":"insert","lines":["a"]}],[{"start":{"row":1063,"column":19},"end":{"row":1063,"column":20},"action":"insert","lines":[" "],"id":23947},{"start":{"row":1063,"column":20},"end":{"row":1063,"column":21},"action":"insert","lines":["w"]},{"start":{"row":1063,"column":21},"end":{"row":1063,"column":22},"action":"insert","lines":["a"]},{"start":{"row":1063,"column":22},"end":{"row":1063,"column":23},"action":"insert","lines":["r"]},{"start":{"row":1063,"column":23},"end":{"row":1063,"column":24},"action":"insert","lines":["r"]},{"start":{"row":1063,"column":24},"end":{"row":1063,"column":25},"action":"insert","lines":["i"]},{"start":{"row":1063,"column":25},"end":{"row":1063,"column":26},"action":"insert","lines":["o"]},{"start":{"row":1063,"column":26},"end":{"row":1063,"column":27},"action":"insert","lines":["r"]}],[{"start":{"row":1063,"column":27},"end":{"row":1063,"column":28},"action":"insert","lines":[" "],"id":23948},{"start":{"row":1063,"column":28},"end":{"row":1063,"column":29},"action":"insert","lines":["f"]},{"start":{"row":1063,"column":29},"end":{"row":1063,"column":30},"action":"insert","lines":["r"]},{"start":{"row":1063,"column":30},"end":{"row":1063,"column":31},"action":"insert","lines":["o"]}],[{"start":{"row":1063,"column":30},"end":{"row":1063,"column":31},"action":"remove","lines":["o"],"id":23949},{"start":{"row":1063,"column":29},"end":{"row":1063,"column":30},"action":"remove","lines":["r"]}],[{"start":{"row":1063,"column":29},"end":{"row":1063,"column":30},"action":"insert","lines":["o"],"id":23950},{"start":{"row":1063,"column":30},"end":{"row":1063,"column":31},"action":"insert","lines":["r"]}],[{"start":{"row":1063,"column":31},"end":{"row":1063,"column":32},"action":"insert","lines":[" "],"id":23951},{"start":{"row":1063,"column":32},"end":{"row":1063,"column":33},"action":"insert","lines":["c"]},{"start":{"row":1063,"column":33},"end":{"row":1063,"column":34},"action":"insert","lines":["e"]},{"start":{"row":1063,"column":34},"end":{"row":1063,"column":35},"action":"insert","lines":["r"]}],[{"start":{"row":1063,"column":35},"end":{"row":1063,"column":36},"action":"insert","lines":["s"],"id":23952},{"start":{"row":1063,"column":36},"end":{"row":1063,"column":37},"action":"insert","lines":["e"]},{"start":{"row":1063,"column":37},"end":{"row":1063,"column":38},"action":"insert","lines":["i"]}],[{"start":{"row":1063,"column":38},"end":{"row":1063,"column":39},"action":"insert","lines":[" "],"id":23953},{"start":{"row":1063,"column":39},"end":{"row":1063,"column":40},"action":"insert","lines":["o"]},{"start":{"row":1063,"column":40},"end":{"row":1063,"column":41},"action":"insert","lines":["n"]}],[{"start":{"row":1063,"column":41},"end":{"row":1063,"column":42},"action":"insert","lines":[" "],"id":23954},{"start":{"row":1063,"column":42},"end":{"row":1063,"column":43},"action":"insert","lines":["t"]},{"start":{"row":1063,"column":43},"end":{"row":1063,"column":44},"action":"insert","lines":["h"]},{"start":{"row":1063,"column":44},"end":{"row":1063,"column":45},"action":"insert","lines":["e"]}],[{"start":{"row":1063,"column":45},"end":{"row":1063,"column":46},"action":"insert","lines":[" "],"id":23955}],[{"start":{"row":1063,"column":46},"end":{"row":1063,"column":48},"action":"insert","lines":["  "],"id":23956}],[{"start":{"row":1063,"column":47},"end":{"row":1063,"column":48},"action":"remove","lines":[" "],"id":23957}],[{"start":{"row":1063,"column":47},"end":{"row":1063,"column":48},"action":"insert","lines":["1"],"id":23958},{"start":{"row":1063,"column":48},"end":{"row":1063,"column":49},"action":"insert","lines":["0"]},{"start":{"row":1063,"column":49},"end":{"row":1063,"column":50},"action":"insert","lines":["t"]},{"start":{"row":1063,"column":50},"end":{"row":1063,"column":51},"action":"insert","lines":["h"]}],[{"start":{"row":1063,"column":51},"end":{"row":1063,"column":52},"action":"insert","lines":[" "],"id":23959},{"start":{"row":1063,"column":52},"end":{"row":1063,"column":53},"action":"insert","lines":["t"]},{"start":{"row":1063,"column":53},"end":{"row":1063,"column":54},"action":"insert","lines":["u"]},{"start":{"row":1063,"column":54},"end":{"row":1063,"column":55},"action":"insert","lines":["e"]},{"start":{"row":1063,"column":55},"end":{"row":1063,"column":56},"action":"insert","lines":["n"]}],[{"start":{"row":1063,"column":55},"end":{"row":1063,"column":56},"action":"remove","lines":["n"],"id":23960},{"start":{"row":1063,"column":54},"end":{"row":1063,"column":55},"action":"remove","lines":["e"]}],[{"start":{"row":1063,"column":54},"end":{"row":1063,"column":55},"action":"insert","lines":["r"],"id":23961},{"start":{"row":1063,"column":55},"end":{"row":1063,"column":56},"action":"insert","lines":["n"]}],[{"start":{"row":1071,"column":0},"end":{"row":1072,"column":0},"action":"insert","lines":["",""],"id":23962},{"start":{"row":1072,"column":0},"end":{"row":1072,"column":1},"action":"insert","lines":["/"]},{"start":{"row":1072,"column":1},"end":{"row":1072,"column":2},"action":"insert","lines":["/"]},{"start":{"row":1072,"column":2},"end":{"row":1072,"column":3},"action":"insert","lines":["r"]},{"start":{"row":1072,"column":3},"end":{"row":1072,"column":4},"action":"insert","lines":["u"]},{"start":{"row":1072,"column":4},"end":{"row":1072,"column":5},"action":"insert","lines":["n"]}],[{"start":{"row":1072,"column":5},"end":{"row":1072,"column":6},"action":"insert","lines":[" "],"id":23963},{"start":{"row":1072,"column":6},"end":{"row":1072,"column":7},"action":"insert","lines":["a"]},{"start":{"row":1072,"column":7},"end":{"row":1072,"column":8},"action":"insert","lines":["l"]},{"start":{"row":1072,"column":8},"end":{"row":1072,"column":9},"action":"insert","lines":["l"]}],[{"start":{"row":1072,"column":9},"end":{"row":1072,"column":10},"action":"insert","lines":[" "],"id":23964},{"start":{"row":1072,"column":10},"end":{"row":1072,"column":11},"action":"insert","lines":["1"]},{"start":{"row":1072,"column":11},"end":{"row":1072,"column":12},"action":"insert","lines":["0"]},{"start":{"row":1072,"column":12},"end":{"row":1072,"column":13},"action":"insert","lines":["t"]},{"start":{"row":1072,"column":13},"end":{"row":1072,"column":14},"action":"insert","lines":["h"]}],[{"start":{"row":1072,"column":14},"end":{"row":1072,"column":15},"action":"insert","lines":[" "],"id":23965},{"start":{"row":1072,"column":15},"end":{"row":1072,"column":16},"action":"insert","lines":["t"]},{"start":{"row":1072,"column":16},"end":{"row":1072,"column":17},"action":"insert","lines":["u"]},{"start":{"row":1072,"column":17},"end":{"row":1072,"column":18},"action":"insert","lines":["r"]},{"start":{"row":1072,"column":18},"end":{"row":1072,"column":19},"action":"insert","lines":["n"]}],[{"start":{"row":1072,"column":19},"end":{"row":1072,"column":20},"action":"insert","lines":["s"],"id":23966}],[{"start":{"row":1072,"column":19},"end":{"row":1072,"column":20},"action":"remove","lines":["s"],"id":23967}],[{"start":{"row":1072,"column":19},"end":{"row":1072,"column":20},"action":"insert","lines":[" "],"id":23968},{"start":{"row":1072,"column":20},"end":{"row":1072,"column":21},"action":"insert","lines":["f"]},{"start":{"row":1072,"column":21},"end":{"row":1072,"column":22},"action":"insert","lines":["u"]},{"start":{"row":1072,"column":22},"end":{"row":1072,"column":23},"action":"insert","lines":["n"]},{"start":{"row":1072,"column":23},"end":{"row":1072,"column":24},"action":"insert","lines":["c"]},{"start":{"row":1072,"column":24},"end":{"row":1072,"column":25},"action":"insert","lines":["t"]},{"start":{"row":1072,"column":25},"end":{"row":1072,"column":26},"action":"insert","lines":["i"]},{"start":{"row":1072,"column":26},"end":{"row":1072,"column":27},"action":"insert","lines":["o"]}],[{"start":{"row":1072,"column":27},"end":{"row":1072,"column":28},"action":"insert","lines":["n"],"id":23969},{"start":{"row":1072,"column":28},"end":{"row":1072,"column":29},"action":"insert","lines":["s"]}],[{"start":{"row":1072,"column":29},"end":{"row":1072,"column":30},"action":"insert","lines":[" "],"id":23970},{"start":{"row":1072,"column":30},"end":{"row":1072,"column":31},"action":"insert","lines":["a"]},{"start":{"row":1072,"column":31},"end":{"row":1072,"column":32},"action":"insert","lines":["t"]}],[{"start":{"row":1072,"column":32},"end":{"row":1072,"column":33},"action":"insert","lines":[" "],"id":23971},{"start":{"row":1072,"column":33},"end":{"row":1072,"column":34},"action":"insert","lines":["t"]},{"start":{"row":1072,"column":34},"end":{"row":1072,"column":35},"action":"insert","lines":["h"]},{"start":{"row":1072,"column":35},"end":{"row":1072,"column":36},"action":"insert","lines":["e"]}],[{"start":{"row":1072,"column":36},"end":{"row":1072,"column":37},"action":"insert","lines":[" "],"id":23972},{"start":{"row":1072,"column":37},"end":{"row":1072,"column":38},"action":"insert","lines":["a"]}],[{"start":{"row":1072,"column":37},"end":{"row":1072,"column":38},"action":"remove","lines":["a"],"id":23973}],[{"start":{"row":1072,"column":37},"end":{"row":1072,"column":38},"action":"insert","lines":["s"],"id":23974},{"start":{"row":1072,"column":38},"end":{"row":1072,"column":39},"action":"insert","lines":["a"]},{"start":{"row":1072,"column":39},"end":{"row":1072,"column":40},"action":"insert","lines":["m"]},{"start":{"row":1072,"column":40},"end":{"row":1072,"column":41},"action":"insert","lines":["e"]}],[{"start":{"row":1072,"column":41},"end":{"row":1072,"column":42},"action":"insert","lines":[" "],"id":23975},{"start":{"row":1072,"column":42},"end":{"row":1072,"column":43},"action":"insert","lines":["t"]},{"start":{"row":1072,"column":43},"end":{"row":1072,"column":44},"action":"insert","lines":["i"]},{"start":{"row":1072,"column":44},"end":{"row":1072,"column":45},"action":"insert","lines":["m"]},{"start":{"row":1072,"column":45},"end":{"row":1072,"column":46},"action":"insert","lines":["e"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":1072,"column":46},"end":{"row":1072,"column":46},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":8,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1556165116501}